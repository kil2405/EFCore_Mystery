version: "3.9"

services:
  db:
    image: mysql:8.0
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: "test123#"
      MYSQL_ROOT_HOST: "%"
      MYSQL_DATABASE: mysterybox
      MYSQL_USER: app
      MYSQL_PASSWORD: apppass
    command: ["mysqld","--default-authentication-plugin=mysql_native_password"]
    ports:
      - "3306:3306"
    volumes:
      - dbdata:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -uroot -p'test123#' --silent || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 30

  redis:
    image: redis:7
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 30

  migrator:
    image: mcr.microsoft.com/dotnet/sdk:8.0
    depends_on:
      db:
        condition: service_healthy
    environment:
      DOTNET_ENVIRONMENT: "Production"
      EFCORE_CONNECTION: "Server=db;Port=3306;Database=mysterybox;User=root;Password=test123#;TreatTinyAsBoolean=false;AllowPublicKeyRetrieval=True;SslMode=None;"
      # 브랜치 바꾸려면 아래에서 origin/main 대신 원하는 브랜치로 바꿔줘
    working_dir: /work
    volumes:
      - srcrepo:/work/src           # ← 소스 지속 보관 (git pull 가능)
    entrypoint:
      - bash
      - -lc
      - |
        set -e

        # 도구
        apt-get update >/dev/null
        apt-get install -y --no-install-recommends default-mysql-client ca-certificates git >/dev/null
        git config --global --add safe.directory /work/src || true

        # DB 준비
        until mysqladmin ping -h db -uroot -p'test123#' --silent; do sleep 2; done
        mysql -h db -uroot -p'test123#' -e "CREATE DATABASE IF NOT EXISTS mysterybox CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci;" >/dev/null

        # 소스: 있으면 pull(reset), 없으면 clone
        if [ -d /work/src/.git ]; then
          git -C /work/src fetch --depth=1 origin main || true
          git -C /work/src reset --hard origin/main || true
        else
          rm -rf /work/src/*
          git clone --depth 1 --branch main https://github.com/kil2405/EFCore_Mystery.git /work/src >/dev/null || \
          git clone --depth 1 https://github.com/kil2405/EFCore_Mystery.git /work/src >/dev/null
        fi

        # 안전 패치(레포 상태에 따라 필요 없을 수도 있지만, 매 실행 자동 보정)
        # 1) DesignTime 팩토리(있으면 Program.cs 대신 타므로 제거)
        rm -f /work/src/src/MysteryBox.Api/Data/DesignTimeDbContextFactory.cs || true
        find /work/src -type f -iname "*DesignTime*Factory*.cs" -exec rm -f {} \; || true

        # 2) 설정: 127.0.0.1 -> db (혹시 남아있으면 교정)
        sed -i 's/Server=127\.0\.0\.1/Server=db/g' /work/src/src/MysteryBox.Api/appsettings.json || true
        [ -f /work/src/src/MysteryBox.Api/appsettings.Production.json ] && \
          sed -i 's/Server=127\.0\.0\.1/Server=db/g' /work/src/src/MysteryBox.Api/appsettings.Production.json || true

        # 3) Program.cs가 AutoDetect면 버전 고정(이미 고정이면 무시)
        grep -q "MySqlServerVersion" /work/src/src/MysteryBox.Api/Program.cs || \
          sed -i 's/ServerVersion\.AutoDetect(conn)/new MySqlServerVersion(new Version(8,0,36))/g' /work/src/src/MysteryBox.Api/Program.cs

        # dotnet-ef 설치
        dotnet tool install --global dotnet-ef --version 8.* >/dev/null || true

        # 캐시 정리 + 마이그레이션
        rm -rf /work/src/src/MysteryBox.Api/bin /work/src/src/MysteryBox.Api/obj
        /root/.dotnet/tools/dotnet-ef database update \
          --project /work/src/src/MysteryBox.Api/MysteryBox.Api.csproj \
          --startup-project /work/src/src/MysteryBox.Api/MysteryBox.Api.csproj \
          --context MysteryBox.Api.Data.AppDbContext

  app:
    build: .
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: "Production"
      DOTNET_ENVIRONMENT: "Production"
      Redis__ConnectionString: "redis:6379"
      # appsettings.Production.json에 DefaultConnection이 Server=db라면 아래는 생략 가능
      # ConnectionStrings__DefaultConnection: "Server=db;Port=3306;Database=mysterybox;User=app;Password=apppass;TreatTinyAsBoolean=false;AllowPublicKeyRetrieval=True;SslMode=None;"
    ports:
      - "5000:5000"
    restart: unless-stopped

  nginx:
    image: nginx:1.25
    depends_on:
      - app
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro

volumes:
  dbdata:
  srcrepo:
